<?php
namespace Hissy\PhpCodeScanner\Analyzer;

use Symfony\Component\Console\Output\OutputInterface;

/**
 * Class WordPressPotentialVulnerabilityAnalyzer
 * @package Hissy\PhpCodeScanner\Analyzer
 */
class WordPressPotentialVulnerabilityAnalyzer extends AbstractAnalyzer implements AnalyzerInterface
{
    /** @var $output OutputInterface */
    protected $output;

    /**
     * @param \SplFileInfo $fileInfo
     * @param OutputInterface $output
     */
    public function analyze(\SplFileInfo $fileInfo, OutputInterface $output)
    {
        $this->file = $fileInfo;
        $this->output = $output;
        $this->tokens = $this->getTokens($fileInfo);
        $this->searchDbCallsWithoutPrepare();
        $this->searchEchosWithoutEscape();
    }

    protected function searchDbCallsWithoutPrepare()
    {
        $existsWpdb = false;
        $existsPrepare = false;

        foreach ($this->tokens as $index => $token) {
            if (is_array($token)) {
                if ($token[0] == T_GLOBAL) {
                    if ($this->catchVariable($this->tokens, $index, '$wpdb')) {
                        $existsWpdb = true;
                    }
                }
            }
        }
        if ($existsWpdb) {
            if ($this->strpos($this->file, '$wpdb->prepare(')) {
                $existsPrepare = true;
            } elseif ($this->strpos($this->file, '$wpdb->insert(')) {
                $existsPrepare = true;
            } elseif ($this->strpos($this->file, '$wpdb->update(')) {
                $existsPrepare = true;
            }

            if (!$existsPrepare) {
                $this->output->writeln(sprintf(
                    '<info>wpdb called in %s but there is no prepare method in the file.</info>',
                    $this->file->getPathname()
                ));
            }
        }
    }

    protected function searchEchosWithoutEscape()
    {
        $escapeFunctions = [
            'esc_html', 'esc_html__', 'esc_textarea', 'sanitize_text_field', 'esc_attr', 'esc_attr__', 'esc_js',
            'esc_url', 'esc_url_raw', 'json_encode', 'wp_kses', 'wp_kses_post', 'wp_kses_data', 'intval', 'absint'
        ];

        foreach ($this->tokens as $index => $token) {
            if (is_array($token) && in_array($token[0], [T_ECHO, T_PRINT])) {
                if ($this->catchVariable($this->tokens, $index)) {
                    $escaped = false;
                    foreach ($escapeFunctions as $function) {
                        if ($this->catchString($this->tokens, $index, $function)) {
                            $escaped = true;
                        }
                    }
                    if (!$escaped) {
                        $this->output->writeln(sprintf(
                            '<info>String printed without escape functions in %s on line %d</info>',
                            $this->file->getPathname(),
                            $token[2]
                        ));
                    }
                }
            }
        }

    }
}